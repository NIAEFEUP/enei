// @ts-nocheck
// @ts-nocheck
/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type { MakeTuyauRequest, MakeTuyauResponse } from '@tuyau/utils/types'
import type { InferInput } from '@vinejs/vine/types'

type AuthLoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/authentication.ts')['loginWithCredentialsValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/authentication_controller.ts').default['login'], true>
}
type AuthRegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/authentication.ts')['registerWithCredentialsValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/authentication_controller.ts').default['register'], true>
}
type AuthLogoutPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/authentication_controller.ts').default['logout'], false>
}
type AuthVerifyNewPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/authentication_controller.ts').default['retryEmailVerification'], false>
}
type AuthPasswordForgotNewPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/authentication.ts')['passwordSendForgotPasswordValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/authentication_controller.ts').default['sendForgotPassword'], true>
}
type AuthPasswordForgotCallbackGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/authentication_controller.ts').default['showForgotPasswordPage'], false>
}
type AuthPasswordForgotCallbackPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/authentication.ts')['passwordResetValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/authentication_controller.ts').default['callbackForForgotPassword'], true>
}
type AuthVerifyCallbackGetPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/authentication.ts')['emailVerificationCallbackValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/authentication_controller.ts').default['callbackForEmailVerification'], true>
}
type SignupGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profiles_controller.ts').default['show'], false>
}
type SignupPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profiles_controller.ts').default['create'], false>
}
type TicketsGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/tickets_controller.ts').default['index'], false>
}
type TicketsIdCheckoutGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/tickets_controller.ts').default['showPayment'], false>
}
type PaymentMbwayPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/order.ts')['createMBWayOrderValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/orders_controller.ts').default['createMBWay'], true>
}
type PaymentIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/orders_controller.ts').default['show'], false>
}
type UIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profiles_controller.ts').default['index'], false>
}
type ProfileGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profiles_controller.ts').default['default'], false>
}
type ProfileEditGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profiles_controller.ts').default['edit'], false>
}
type ProfileEditPatch = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profiles_controller.ts').default['update'], false>
}
type EventGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/events_controller.ts').default['index'], false>
}
type UserCvNameGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/cvs_controller.ts').default['showName'], false>
}
type UserCvUploadPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/cvs_controller.ts').default['upload'], false>
}
type UserCvDeleteDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/cvs_controller.ts').default['delete'], false>
}
type StoreGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/store_controller.ts').default['index'], false>
}
type StoreProductsIdBuyPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/store_controller.ts').default['buy'], false>
}
type ReferralsGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/referrals_controller.ts').default['showReferralLink'], false>
}
type RIdGetPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/referrals_controller.ts').default['link'], false>
}
export interface ApiDefinition {
  'auth': {
    'login': {
      '$url': {
      };
      '$post': AuthLoginPost;
    };
    'register': {
      '$url': {
      };
      '$post': AuthRegisterPost;
    };
    'logout': {
      '$url': {
      };
      '$post': AuthLogoutPost;
    };
    'verify': {
      'new': {
        '$url': {
        };
        '$post': AuthVerifyNewPost;
      };
      'callback': {
        '$url': {
        };
        '$get': AuthVerifyCallbackGetPost;
        '$post': AuthVerifyCallbackGetPost;
      };
    };
    'password': {
      'forgot': {
        'new': {
          '$url': {
          };
          '$post': AuthPasswordForgotNewPost;
        };
        'callback': {
          '$url': {
          };
          '$get': AuthPasswordForgotCallbackGetHead;
          '$head': AuthPasswordForgotCallbackGetHead;
          '$post': AuthPasswordForgotCallbackPost;
        };
      };
    };
  };
  'signup': {
    '$url': {
    };
    '$get': SignupGetHead;
    '$head': SignupGetHead;
    '$post': SignupPost;
  };
  'tickets': {
    '$url': {
    };
    '$get': TicketsGetHead;
    '$head': TicketsGetHead;
    ':id': {
      'checkout': {
        '$url': {
        };
        '$get': TicketsIdCheckoutGetHead;
        '$head': TicketsIdCheckoutGetHead;
      };
    };
  };
  'payment': {
    'mbway': {
      '$url': {
      };
      '$post': PaymentMbwayPost;
    };
    ':id': {
      '$url': {
      };
      '$get': PaymentIdGetHead;
      '$head': PaymentIdGetHead;
    };
  };
  'u': {
    ':slug': {
      '$url': {
      };
      '$get': UIdGetHead;
      '$head': UIdGetHead;
    };
  };
  'profile': {
    '$url': {
    };
    '$get': ProfileGetHead;
    '$head': ProfileGetHead;
    'edit': {
      '$url': {
      };
      '$get': ProfileEditGetHead;
      '$head': ProfileEditGetHead;
      '$patch': ProfileEditPatch;
    };
  };
  'event': {
    '$url': {
    };
    '$get': EventGetHead;
    '$head': EventGetHead;
  };
  'user': {
    'cv': {
      'name': {
        '$url': {
        };
        '$get': UserCvNameGetHead;
        '$head': UserCvNameGetHead;
      };
      'upload': {
        '$url': {
        };
        '$post': UserCvUploadPost;
      };
      'delete': {
        '$url': {
        };
        '$delete': UserCvDeleteDelete;
      };
    };
  };
  'store': {
    '$url': {
    };
    '$get': StoreGetHead;
    '$head': StoreGetHead;
    'products': {
      ':id': {
        'buy': {
          '$url': {
          };
          '$post': StoreProductsIdBuyPost;
        };
      };
    };
  };
  'referrals': {
    '$url': {
    };
    '$get': ReferralsGetHead;
    '$head': ReferralsGetHead;
  };
  'r': {
    ':referralCode': {
      '$url': {
      };
      '$get': RIdGetPost;
      '$post': RIdGetPost;
    };
  };
}
const routes = [
  {
    params: ["*"],
    name: 'drive.fs.serve',
    path: '/uploads/*',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'pages:home',
    path: '/',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'pages:auth.login',
    path: '/auth/login',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'actions:auth.login',
    path: '/auth/login',
    method: ["POST"],
    types: {} as AuthLoginPost,
  },
  {
    params: [],
    name: 'pages:auth.register',
    path: '/auth/register',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'actions:auth.register',
    path: '/auth/register',
    method: ["POST"],
    types: {} as AuthRegisterPost,
  },
  {
    params: [],
    name: 'actions:auth.logout',
    path: '/auth/logout',
    method: ["POST"],
    types: {} as AuthLogoutPost,
  },
  {
    params: [],
    name: 'pages:auth.verify',
    path: '/auth/verify',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'actions:auth.verify.send',
    path: '/auth/verify/new',
    method: ["POST"],
    types: {} as AuthVerifyNewPost,
  },
  {
    params: [],
    name: 'pages:auth.forgot-password',
    path: '/auth/password/forgot',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'page:auth.forgot-password.sent',
    path: '/auth/password/forgot/sent',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'actions:auth.forgot-password.send',
    path: '/auth/password/forgot/new',
    method: ["POST"],
    types: {} as AuthPasswordForgotNewPost,
  },
  {
    params: [],
    name: 'pages:auth.forgot-password.callback',
    path: '/auth/password/forgot/callback',
    method: ["GET","HEAD"],
    types: {} as AuthPasswordForgotCallbackGetHead,
  },
  {
    params: [],
    name: 'actions:auth.forgot-password.callback',
    path: '/auth/password/forgot/callback',
    method: ["POST"],
    types: {} as AuthPasswordForgotCallbackPost,
  },
  {
    params: [],
    name: 'actions:auth.forgot-password.success',
    path: '/auth/password/forgot/success',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'pages:auth.verify.success',
    path: '/auth/verify/success',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'actions:auth.verify.callback',
    path: '/auth/verify/callback',
    method: ["GET","POST"],
    types: {} as AuthVerifyCallbackGetPost,
  },
  {
    params: [],
    name: 'pages:signup',
    path: '/signup',
    method: ["GET","HEAD"],
    types: {} as SignupGetHead,
  },
  {
    params: [],
    name: 'actions:signup',
    path: '/signup',
    method: ["POST"],
    types: {} as SignupPost,
  },
  {
    params: [],
    name: 'pages:tickets',
    path: '/tickets',
    method: ["GET","HEAD"],
    types: {} as TicketsGetHead,
  },
  {
    params: ["id"],
    name: 'checkout',
    path: '/tickets/:id/checkout',
    method: ["GET","HEAD"],
    types: {} as TicketsIdCheckoutGetHead,
  },
  {
    params: ["id"],
    name: 'payment.show',
    path: '/payment/:id',
    method: ["GET","HEAD"],
    types: {} as PaymentIdGetHead,
  },
  {
    params: ["slug"],
    name: 'pages:profile.show',
    path: '/u/:slug',
    method: ["GET","HEAD"],
    types: {} as UIdGetHead,
  },
  {
    params: [],
    name: 'pages:profile.default',
    path: '/profile',
    method: ["GET","HEAD"],
    types: {} as ProfileGetHead,
  },
  {
    params: [],
    name: 'pages:profile.edit',
    path: '/profile/edit',
    method: ["GET","HEAD"],
    types: {} as ProfileEditGetHead,
  },
  {
    params: [],
    name: 'actions:profile.update',
    path: '/profile/edit',
    method: ["PATCH"],
    types: {} as ProfileEditPatch,
  },
  {
    params: [],
    name: 'pages:faq',
    path: '/faq',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'pages:event',
    path: '/event',
    method: ["GET","HEAD"],
    types: {} as EventGetHead,
  },
  {
    params: [],
    name: 'pages:cv',
    path: '/cv',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'pages:store',
    path: '/store',
    method: ["GET","HEAD"],
    types: {} as StoreGetHead,
  },
  {
    params: ["id"],
    name: 'actions:store.buy',
    path: '/store/products/:id/buy',
    method: ["POST"],
    types: {} as StoreProductsIdBuyPost,
  },
  {
    params: [],
    name: 'pages:referrals',
    path: '/referrals',
    method: ["GET","HEAD"],
    types: {} as ReferralsGetHead,
  },
  {
    params: ["referralCode"],
    name: 'actions:referrals.link',
    path: '/r/:referralCode',
    method: ["GET","POST"],
    types: {} as RIdGetPost,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition
}
declare module '@tuyau/inertia/types' {
  type InertiaApi = typeof api
  export interface Api extends InertiaApi {}
}
